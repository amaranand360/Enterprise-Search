'use client';import { useState, useEffect, useRef } from 'react';import { Calendar, Bot, Send, Loader2, MessageSquare, Settings, History, BarChart3, X } from 'lucide-react';import { Button } from '@/components/ui/Button';import { Modal } from '@/components/ui/Modal';interface CalendarAgentComponentProps {  isOpen: boolean;  onClose: () => void;}interface ChatMessage {  id: string;  type: 'user' | 'agent' | 'system';  content: string;  timestamp: Date;}interface AgentStats {  totalRequests: number;  successfulRequests: number;  avgResponseTime: number;  popularActions: Array<{ action: string; count: number }>;}export function CalendarAgentComponent({ isOpen, onClose }: CalendarAgentComponentProps) {  const [messages, setMessages] = useState<ChatMessage[]>([]);  const [inputValue, setInputValue] = useState('');  const [isProcessing, setIsProcessing] = useState(false);  const [isInitialized, setIsInitialized] = useState(false);  const [sessionId] = useState(() => `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);  const [agentStats, setAgentStats] = useState<AgentStats | null>(null);  const [showHistory, setShowHistory] = useState(false);  const [showStats, setShowStats] = useState(false);  const [historyMessages, setHistoryMessages] = useState<ChatMessage[]>([]);  const messagesEndRef = useRef<HTMLDivElement>(null);  const scrollToBottom = () => {    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });  };  const initializeAgent = async () => {    try {      const response = await fetch('/api/calendar-agent', {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify({          action: 'initialize',          sessionId        })      });      const data = await response.json();            if (data.success) {        setIsInitialized(true);        addMessage('system', '🤖 Calendar Agent initialized! I can help you manage your Google Calendar. Try asking me to create events, check your schedule, or update existing appointments.');        await loadAgentStats();      } else {        addMessage('system', `❌ Failed to initialize: ${data.error}`);      }    } catch (error) {      addMessage('system', `❌ Failed to connect to calendar agent: ${error instanceof Error ? error.message : 'Network error'}`);    }  };  const loadAgentStats = async () => {    try {      const response = await fetch('/api/calendar-agent', {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify({          action: 'getStats',          sessionId        })      });      const data = await response.json();      if (data.success) {        setAgentStats(data.stats);      }    } catch (error) {      console.error('Failed to load agent stats:', error);    }  };  const addMessage = (type: 'user' | 'agent' | 'system', content: string) => {    const newMessage: ChatMessage = {      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,      type,      content,      timestamp: new Date()    };    setMessages(prev => [...prev, newMessage]);  };  const handleSendMessage = async () => {    if (!inputValue.trim() || !isInitialized || isProcessing) return;    const userMessage = inputValue.trim();    setInputValue('');    addMessage('user', userMessage);    setIsProcessing(true);    try {      const response = await fetch('/api/calendar-agent', {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify({          action: 'process',          userRequest: userMessage,          sessionId        })      });      const data = await response.json();            if (data.success) {        addMessage('agent', data.response);      } else {        addMessage('system', `❌ Error: ${data.error}`);      }    } catch (error) {      addMessage('system', `❌ Failed to process request: ${error instanceof Error ? error.message : 'Network error'}`);    } finally {      setIsProcessing(false);    }  };  const handleKeyPress = (e: React.KeyboardEvent) => {    if (e.key === 'Enter' && !e.shiftKey) {      e.preventDefault();      handleSendMessage();    }  };  const handleClearHistory = async () => {    try {      const response = await fetch('/api/calendar-agent', {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify({          action: 'reset',          sessionId        })      });      if (response.ok) {        setMessages([]);        addMessage('system', '🧹 Chat history cleared!');      }    } catch (error) {      addMessage('system', `❌ Failed to clear history: ${error instanceof Error ? error.message : 'Network error'}`);    }  };  const handleShowHistory = async () => {    try {      const response = await fetch('/api/calendar-agent', {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify({          action: 'getHistory',          sessionId        })      });      const data = await response.json();      if (data.success) {        setHistoryMessages(data.history || []);        setShowHistory(true);      }    } catch (error) {      console.error('Failed to load history:', error);    }  };  const handleShowStats = () => {    setShowStats(true);  };  useEffect(() => {    if (isOpen && !isInitialized) {      initializeAgent();    }  }, [isOpen]);  useEffect(() => {    scrollToBottom();  }, [messages]);  if (!isOpen) return null;  return (    <Modal isOpen={isOpen} onClose={onClose} size="lg">      <div className="flex flex-col h-[600px] bg-white dark:bg-gray-900">        {/* Header */}        <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">          <div className="flex items-center space-x-3">            <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">              <Calendar className="h-5 w-5 text-blue-600 dark:text-blue-400" />            </div>            <div>              <h2 className="text-lg font-semibold text-gray-900 dark:text-white">                Calendar Agent              </h2>              <p className="text-sm text-gray-500 dark:text-gray-400">                {isInitialized ? 'Ready to help with your calendar' : 'Initializing...'}              </p>            </div>          </div>          <div className="flex items-center space-x-2">            <Button              variant="ghost"              size="sm"              onClick={handleShowHistory}              className="p-2"            >              <History className="h-4 w-4" />            </Button>            <Button              variant="ghost"              size="sm"              onClick={handleShowStats}              className="p-2"            >              <BarChart3 className="h-4 w-4" />            </Button>            <Button              variant="ghost"              size="sm"              onClick={onClose}              className="p-2"            >              <X className="h-4 w-4" />            </Button>          </div>        </div>        {/* Messages */}        <div className="flex-1 overflow-y-auto p-4 space-y-4">          {messages.map((message) => (            <div              key={message.id}              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}            >              <div                className={`max-w-[80%] p-3 rounded-lg ${                  message.type === 'user'                    ? 'bg-blue-600 text-white'                    : message.type === 'system'                    ? 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300'                    : 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white'                }`}              >                <div className="flex items-start space-x-2">                  {message.type === 'agent' && (                    <Bot className="h-4 w-4 mt-0.5 flex-shrink-0" />                  )}                  <div className="flex-1">                    <p className="text-sm whitespace-pre-wrap">{message.content}</p>                    <p className="text-xs mt-1 opacity-70">                      {message.timestamp.toLocaleTimeString()}                    </p>                  </div>                </div>              </div>            </div>          ))}          {isProcessing && (            <div className="flex justify-start">              <div className="bg-gray-200 dark:bg-gray-700 p-3 rounded-lg">                <div className="flex items-center space-x-2">                  <Bot className="h-4 w-4" />                  <Loader2 className="h-4 w-4 animate-spin" />                  <span className="text-sm text-gray-600 dark:text-gray-400">                    Processing your request...                  </span>                </div>              </div>            </div>          )}          <div ref={messagesEndRef} />        </div>        {/* Input */}        <div className="p-4 border-t border-gray-200 dark:border-gray-700">          <div className="flex space-x-2">            <input              type="text"              value={inputValue}              onChange={(e) => setInputValue(e.target.value)}              onKeyPress={handleKeyPress}              placeholder={isInitialized ? "Ask me about your calendar..." : "Initializing agent..."}              disabled={!isInitialized || isProcessing}              className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"            />            <Button              onClick={handleSendMessage}              disabled={!inputValue.trim() || !isInitialized || isProcessing}              className="px-4 py-2"            >              {isProcessing ? (                <Loader2 className="h-4 w-4 animate-spin" />              ) : (                <Send className="h-4 w-4" />              )}            </Button>          </div>          <div className="flex justify-between items-center mt-2">            <div className="text-xs text-gray-500 dark:text-gray-400">              Session: {sessionId.split('-').pop()}            </div>            <Button              variant="ghost"              size="sm"              onClick={handleClearHistory}              className="text-xs"            >              Clear History            </Button>          </div>        </div>      </div>      {/* History Modal */}      {showHistory && (        <Modal isOpen={showHistory} onClose={() => setShowHistory(false)} size="md">          <div className="p-6">            <div className="flex items-center justify-between mb-4">              <h3 className="text-lg font-semibold">Chat History</h3>              <Button                variant="ghost"                size="sm"                onClick={() => setShowHistory(false)}              >                <X className="h-4 w-4" />              </Button>            </div>            <div className="max-h-96 overflow-y-auto space-y-2">              {historyMessages.length > 0 ? (                historyMessages.map((message) => (                  <div key={message.id} className="p-2 bg-gray-50 dark:bg-gray-800 rounded">                    <div className="flex items-center space-x-2 text-xs text-gray-500 mb-1">                      <MessageSquare className="h-3 w-3" />                      <span>{message.type}</span>                      <span>{new Date(message.timestamp).toLocaleString()}</span>                    </div>                    <p className="text-sm">{message.content}</p>                  </div>                ))              ) : (                <p className="text-center text-gray-500">No history available</p>              )}            </div>          </div>        </Modal>      )}      {/* Stats Modal */}      {showStats && agentStats && (        <Modal isOpen={showStats} onClose={() => setShowStats(false)} size="md">          <div className="p-6">            <div className="flex items-center justify-between mb-4">              <h3 className="text-lg font-semibold">Agent Statistics</h3>              <Button                variant="ghost"                size="sm"                onClick={() => setShowStats(false)}              >                <X className="h-4 w-4" />              </Button>            </div>            <div className="grid grid-cols-2 gap-4 mb-6">              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">                <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">                  {agentStats.totalRequests}                </div>                <div className="text-sm text-gray-600 dark:text-gray-400">Total Requests</div>              </div>              <div className="p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">                <div className="text-2xl font-bold text-green-600 dark:text-green-400">                  {agentStats.successfulRequests}                </div>                <div className="text-sm text-gray-600 dark:text-gray-400">Successful</div>              </div>            </div>            <div className="mb-4">              <h4 className="font-medium mb-2">Popular Actions</h4>              {agentStats.popularActions.length > 0 ? (                <div className="space-y-2">                  {agentStats.popularActions.map((action, index) => (                    <div key={index} className="flex justify-between items-center p-2 bg-gray-50 dark:bg-gray-800 rounded">                      <span className="text-sm">{action.action}</span>                      <span className="text-sm font-medium">{action.count}</span>                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-gray-500">No actions recorded yet</p>
              )}
            </div>
          </div>
        </Modal>
      )}
    </Modal>
  );
}
